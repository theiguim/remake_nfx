// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  position  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  courses   Courses[]
}

model Courses {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(255)
  synopsis     String
  thumbnailUrl String?
  featured     Boolean     @default(false) @db.Boolean
  categoryId   Int
  category     Categories  @relation(fields: [categoryId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  episodes     Episodes[]
  Favorites    Favorites[]
  likes        Likes[]
}

model Episodes {
  id          Int      @id @default(autoincrement())
  name        String
  synopsis    String
  order       Int
  videoUrl    String?
  secondsLong Int?
  courseId    Int
  courses     Courses  @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Users {
  id        Int         @id @default(autoincrement())
  firstName String      @db.VarChar(255)
  lastName  String      @db.VarChar(255)
  phone     String      @db.VarChar(20)
  birth     String
  email     String      @unique @db.VarChar(200)
  password  String      @db.VarChar(250)
  role      Role        @default(user)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Favorites Favorites[]
  likes     Likes[]
}

enum Role {
  admin
  user
}

model Favorites {
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users   @relation(fields: [userId], references: [id])
  course Courses @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model Likes {
  userId   Int
  courseId Int
  user     Users   @relation(fields: [userId], references: [id])
  course   Courses @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}
